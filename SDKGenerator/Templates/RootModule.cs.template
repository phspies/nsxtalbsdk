using System;
using RestSharp;
using RestSharp.Authenticators;
using RestSharp.Serializers.NewtonsoftJson;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using nsxtalbsdk.Modules;
using System.Threading;
using System.Threading.Tasks;
using nsxtalbsdk.Authentication;
using System.Linq;
using System.Collections.Generic;
namespace nsxtalbsdk
{
    public class NSXTALBClient
    {
        public RestClient restClient { get; set; }
        private JsonSerializerSettings defaultSerializationSettings;
        private CancellationToken cancellationToken;
        private int timeout;
        private int retry;
        private string defaultXAviVerion;
        private RestResponseCookie sessionCookie;
        private List<RestResponseCookie> sessionCookies;
        private string host;
        private int port;
        private bool remoteCertificateValidation;
        private LoginRequestType credentials;
        public NSXTALBClient(string Host, string Username, string Password, bool? RemoteCertificateValidation = true, JsonSerializerSettings? DefaultSerializationSettings = null, CancellationToken _cancellationToken = default(CancellationToken), int Port = 443, int _timeout = 5, int _retry = 2, string _defaultXAviVerion = null)
        {
            host = Host;
            cancellationToken = _cancellationToken;
            timeout = _timeout;
            retry = _retry;
            defaultXAviVerion = _defaultXAviVerion;
            port = Port;
            remoteCertificateValidation = RemoteCertificateValidation ?? true;
            credentials = new LoginRequestType()
            {
                Username = Username,
                Password = Password
            };
            var uri = new UriBuilder(host)
            {
                Scheme = Uri.UriSchemeHttps,
                Port = port
            };
            restClient = new RestClient(uri.Uri);
            if (remoteCertificateValidation == false)
            {
                restClient.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
            }
            if (DefaultSerializationSettings == null)
            {
                defaultSerializationSettings = new JsonSerializerSettings
                {
                    ContractResolver = new CamelCasePropertyNamesContractResolver(),
                    DefaultValueHandling = DefaultValueHandling.Include,
                    TypeNameHandling = TypeNameHandling.None,
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
                };
            }
            else
            {
                defaultSerializationSettings = DefaultSerializationSettings;
            }
            restClient.UseNewtonsoftJson(defaultSerializationSettings);
        }
        public async Task<LoginResponseType> LoginAsync()
        {
            IRestResponse<LoginResponseType> response = await AuthenticationHelper.LoginAsync(credentials, restClient, defaultSerializationSettings, cancellationToken, timeout, retry);
            sessionCookie = response.Cookies.First(x => x.Name == response.Data.SessionCookieName);
            sessionCookies = response.Cookies.ToList();
            if (sessionCookie == null)
            {
                throw new NSXTALBException("Cookie variable not found", (int)response.StatusCode, response.Content, response.Headers);
            }
            if (defaultXAviVerion == null)
            {
                defaultXAviVerion = response.Data.Version.MinVersion;
            }
            return response.Data;
        }
        public void Logout()
        {
            AuthenticationHelper.Logout(sessionCookies, restClient);
        }
        public ClusterRuntime ClusterRuntimeModule => new ClusterRuntime(restClient, sessionCookies, defaultSerializationSettings, cancellationToken, timeout, retry, defaultXAviVerion);
        {{#modules}}
        public {{.}} {{.}}Module => new {{.}}(restClient, sessionCookies, defaultSerializationSettings, cancellationToken, timeout, retry, defaultXAviVerion);
        {{/modules}}
    }
}