using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtalbsdk;
using nsxtalbsdk.Models;
using System.Linq;
using System.Collections.Generic;
namespace nsxtalbsdk.Modules
{
    public class {{module}}
    {
        private RestClient restClient;
        private CancellationToken cancellationToken;
        private int timeout;
        private int retry;
        private string defaultXAviVerion;
        private List<Cookie> sessionCookies;
        public {{module}}(RestClient Client, List<Cookie> _sessionCookies, CancellationToken _cancellationToken, int _timeout, int _retry, string _defaultXAviVerion)
        {
            restClient = Client;
            cancellationToken = _cancellationToken;
            retry = _retry;
            timeout = _timeout;
            defaultXAviVerion = _defaultXAviVerion;
            sessionCookies = _sessionCookies;
        }
        {{#operations}}
        public async Task<{{GetOperationReturnType . "full"}}> {{GetMethodName .}}Async({{GetOperationPathParams .}})
        {
            {{#operation.parameters}}
            {{GetRequiredLine .}}
            {{/operation.parameters}}
            StringBuilder {{GetMethodName .}}ServiceURL = new StringBuilder("{{ GetServiceUrl . }}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.{{GetOperationHttpMethod .}}
            };
            request.AddHeader("Content-type", "application/json");
            {{#operation.parameters}}
            {{GetOperationPathInjectionCode . operations.Current }}
            {{/operation.parameters}}
            request.Resource = {{GetMethodName .}}ServiceURL.ToString();
            RestResponse<{{GetOperationReturnType . "bare"}}> response = await restClient.ExecuteTaskAsyncWithPolicy<{{GetOperationReturnType . "bare"}}>(request, cancellationToken, timeout, retry);
		    if (!(200 <= (int)response.StatusCode && (int)response.StatusCode <= 300)) 
			{
                var message = "HTTP {{GetOperationHttpMethod .}} operation to " + {{GetMethodName .}}ServiceURL.ToString() + " did not complete successfull";
                throw new NSXTALBException(message, (int)response.StatusCode, response.Content,  response.Headers, response.ErrorException);
			}
            {{GetOperationReturnType . "return"}}
        }
        {{/operations}}
    }
}
