
using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtalbsdk;
using nsxtalbsdk.Models;

namespace nsxtalbsdk.Modules
{
    public class {{module}}
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public {{module}}(RestClient Client, JsonSerializerSettings DefaultSerializationSettings, CancellationToken cancellationToken = default(CancellationToken), int timeout, int retry)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        {{#operations}}
        public async Task<{{GetOperationReturnType . "full"}}> {{GetMethodName .}}({{GetOperationPathParams .}})
        {
            {{#operation.parameters}}
            {{#isRequired}}
            if ({{GetParameterPascalCase name}} == null) { throw new ArgumentNullException("{{GetParameterPascalCase name}} cannot be null"); }
            {{/isRequired}}
            {{/operation.parameters}}
            {{GetOperationReturnType . "init"}}
            StringBuilder {{GetMethodName .}}ServiceURL = new StringBuilder("{{ GetServiceUrl . }}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.{{GetOperationHttpMethod .}}
            };
            request.AddHeader("Content-type", "application/json");
            {{#operation.parameters}}
            {{GetOperationPathInjectionCode . operations.Current }}
            {{/operation.parameters}}
            request.Resource = {{GetMethodName .}}ServiceURL.ToString();
            IRestResponse<{{GetOperationReturnType . "bare"}}> response = await restClient.ExecuteTaskAsyncWithPolicy<{{GetOperationReturnType . "bare"}}>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP {{GetOperationHttpMethod .}} operation to " + {{GetMethodName .}}ServiceURL.ToString() + " did not complete successfull";
                throw new NSXTALBException(message, (int)response.StatusCode, response.Content,  response.Headers);
			}
            {{GetOperationReturnType . "return"}}
        }
        {{/operations}}
    }
}
